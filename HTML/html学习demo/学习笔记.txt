结构(HTML)
表现(CSS) 
行为(JavaScript)
-------------------------------------------------------------------------------------------
HTML(超文本标记语言)

html实体
	&nbsp; 空格 
	&reg; 注册商标(®)
	&copy; 版权(©)

行类元素与块元素
	- 块元素独占一行  
	- 行类元素只占自身大小

注释
	html注释
	<!-- -->
	css注释
	/* */

标签
	- 更多标签在w3cschool中能查询到，大概列举些
	文本标签 
		<em> <code> <del> <pre> <q> <blockquote> <cite> <small> <sup> <sub> 
	
	列表
		- 无序列表
		- <ul>
			<li></li>
			</ul>

		- 有序列表
		- <ol>
			<li></li>
			</ol>

		- 自定义列表
		- <dl>
				<dl>
					<dd></dd>
				</dl>
			</dl>

--------------------------------------------------------------------------------------------------------------------------
CSS(层叠样式表)

(重点内容)
CSS选择器
	参考资料：https://github.com/pitaya-flower/CSS-selector

	常用选择器
		- 元素选择器(元素标签)

		- id选择器(#)

		- 类选择器(.)

		- 通配选择器(*)
		- 作用：表示选择页面所有元素

	复合选择器（交集选择器）
		- 语法：选择器1选择器2选择器{css样式}

	选择器分组
		- 语法：选择器1,选择器2,选择器3{css样式}

	后代选择器
		- 语法：祖先元素 后代元素 xxx{css样式}

	子元素选择器
		- 语法：父元素 > 子元素 > xxx{css样式}

	伪类选择器
		- 作用：专门用来选择元素的一种特殊的状态
		- 语法(E代表元素标签)：
		- E:link{} 匹配所有未被点击的链接
		- E:visited{} 匹配所有已被点击的链接
		- E:active{} 匹配鼠标已经按下但没有释放的元素
		- E:hover{} 鼠标悬停其上的元素
		- E:focus{} 匹配获得当前焦点的元素
		- ...
		
	伪元素选择器(IE6不支持)
		- 作用：用来选择元素中的一些特殊位置
		- 语法(E代表元素标签)：
			- E::first-line{} 匹配E元内容的第一行
			- E::first-letter{} 匹配E元素内容的第一个字母
			- E::before{} 在E元素之前插入生成的内容
			- E::after{} 在E元素之后插入生成的内容
	
	属性选择器
		- 作用： 根据元素中的属性和属性值来选取指定元素
		- 语法(E代表元素标签)
		- E[属性名] 选取含有指定属性的元素
		- E[属性名="属性值"] 选取含有指定属性值的元素
		- E[属性名^="属性值"] 选取指定内容开头的元素
		- E[属性名$="属性值"] 选取指定内容结尾的元素
		- E[属性名*="属性值'"] 选取包含指定内容的元素

	兄弟元素选择器
		- 作用：用来选中一个元素后紧挨着的指定的兄弟元素
		语法：
		- 前一个+ 后一个 
		- 前一个~后面所有 表示选中后边所有元素
	
	否定伪类
		- 作用：选中指定元素后，剔除掉不想选中的元素
		- 语法(E表示元素标签)
		- E:not(选择器){}
	
	优先级规则
		内联样式，优先级 1000
		id选择器，优先级 100
		类和伪类，优先级 10
		元素选择器 优先级 1
		通配选择器，优先级 0
		继承样式，没有优先级

	伪类的顺序
		后面一个伪类会覆盖掉前一个伪类

(重点内容)
盒模型(重点)
	盒子组成
		内容区、边框、内边距
		盒子大小 = 内容区 + 边框 + 内边距

	设置边框(占用盒子大小)：
		- border
		- border-top: 5px;
		- border-right: 5px;
		- border-bottom: 5px;
		- border-left: 5px;
	
		- border简写
		- border: 3px solid red;
		
	设置内边距(占用盒子大小)
		- padding
		- padding-top: 5px;
		- padding-right: 4px;
		- padding-bottom: 3px;
		- padding-left: 2px;
	
		- padding简写
		- padding: 5px 4px 3px 2px;
 
	设置外边距(不占用盒子本身大小)
		- margin
		- margin-top: 20px (向下移动元素位置)
		- margin-right: 20px (默认情况下不生效) 
		- margin-bottom: 20px(向上移动元素位置)
		- margin-left: 20px(向右移动元素位置)

	垂直外边距折叠
		- 相邻的垂直方向外边距会发生重叠现象
		- 兄弟元素
			- 兄弟元素之间相邻垂直外边距会取两者之间的较大值(两者都是正值)
		- 父子元素
			- 父子元素间相邻外边距，子元素的外边距会传递给父元素(上外边距)


	盒子的水平布局
		一个元素在其父元素中，水平布局必须要满足以下等式
		margin-left + border-left + padding-left + width + padding-right + border-right + margin-right=父元素总大小


	设置盒子的尺寸
		box-sizeing: centent-box(宽度和高度用来设置内容区大小，增加边框后会扩大)/border-box(宽度和高度来设置整个可见框大小,增加边框后会往里缩，不会扩大)

	设置阴影
		box-shadow: 10px 10px 10px(设置模糊半径) rgb(0, 0, 0, .3)

	设置圆角
		border-redius
		border-top-left-redius
		border-top-right-redius
		border-bottom-right-redius
		border-bootom-left-redius

(重点内容)
浮动
	元素设置浮动以后，将会从文档流中脱离
		脱离文档流特点：
			块元素：
				1、块元素不在独占页面一行
				2、脱离文档流以后，块元素的宽度和高度会被内容撑开
			行类元素：
				行类元素脱离文档流后就会变成块元素
	float: 用来设置元素水平排列
	可选值：
		none 默认值，元素不浮动
		left 元素向左浮动
		right 元素向右浮动
	特点：
		浮动元素不会盖住文字，可以用来设置文字环绕
		
	使用浮动出现的问题
		- 高度塌陷问题

	解决方案
	BFC(Block Formatting Context) 块级格式化
		- BFC是CSS中的一个隐含的属性，可以为一个元素开启BFC
		开启BFC该元素会变成一个独立的布局区域
		- 元素开启BFC后的特点：
			1. 开启BFC的元素不会被浮动的元素覆盖
			2. 开启BFC的元素和父元素外边距不会重叠
			3. 开启BFC的元素可以包含浮动的子元素
		
	开启元素BFC的特殊方式：
		1. 设置元素的浮动（副作用大）
		2. 将元素设置为行类块元素（副作用大）
		3. 将元素的overflow设置为一个非visible值
			- overflow: auto;
	
	清除浮动
		clear
			- 作用：清除浮动元素对当前元素的影响
			- 可选值
				left 清除左侧浮动元素对当前元素的影响
				right 清除右侧浮动元素对当前元素的影响
				both 清除两侧中最大的那侧
			- 原理
				通过给当前元素添加一个与浮动元素相等高度的外边距来实现清除浮动		

	高度塌陷 和 外边距重叠 解决方案
		.clearfix::before,
		.clearfix::after{
			content: '';
			display: table;
			clear: both;
		}

(重点内容)
定位(position)
	- 定位是一种更加高级的定位
	- 通过定位可以将元素摆放到任意位置
	- position属性设置定位
		可选值
			static 默认值，不开启定位
			relative 开启元素的相对定位
			absolute 开启元素的绝对定位
			fixed 开启元素固定定位
			sticky 开启元素的粘滞定位

	- 相对定位
		- 设置属性值为relative
		特点
		- 开启定位后，不设置偏移量，不会发生任何变化
		- 相对定位是参照于元素在文档流中位置进行定位的
		- 相对定位会提升元素层级
		- 相对定位不会使元素脱离文档流
		- 相对定位不会改变元素的性质，块还是块，行类还是行类

	- 绝对定位
		- 设置属性值为absolute
		特点
			- 开启绝对定位后，如果不设置偏移量，元素位置不会法发生任何改变
			- 开启绝对定位后，元素会从文档流中脱离
			- 绝对定位会改变元素的性质，行类变快，块的高度由内容撑开
			- 绝对定位会使元素提升一个层级
			- 绝对定位元素是相对于包含块进行定位
		
		包含块
		- 正常情况下：
			包含块就是离文档最近的祖先块元素
			
		- 绝对定位的包含块
			包含块就是离它最近的开启了定位的祖先元素
			如果所有的祖先元素都没有开启定位，那么根元素就是它的包含块
			
		- html(根元素、初始包含块)
	
	- 固定定位
		设置属性值为fixed
		- 固定定位也是一种绝对定位，所以固定定位的特点更绝对定位类似。
			唯一不同的是固定定位永远参照于浏览器的视口进行定位

	- 粘滞定位
		设置属性值为sticky
		- 粘滞定位和相对定位基本一致
			不同的是粘滞定位可以在元素到达某个位置的时候将其固定			

	偏移量(offset)
		- 开启定位后，通过偏移量来设置元素的位置
			top
			- 定位元素和定位位置上边的距离
			bottom
			- 定位元素和定位位置下边的距离
			left
			- 定位元素和定位位置左侧的距离
			right
			- 定位元素和定位位置右侧的距离

	定位下的水平布和垂直布局	 
		水平布局需要满足的等式
		父元素宽度 = left + margin-left + padding-left + border-left + width + margin-right + padding-right + border-right + right

		垂直方向布局需要满足的等式
		父元素高度 = top + margin-top + padding-top + border-top + height + margin-bottom + padding-bottom + border-bottom + bottom	

	元素的层级
		对于开启了定位元素，可以通过z-index属性来指定元素的层级
		z-index 需要一个整数作为参数，值越大元素的层级越高
			元素的层级越高越优先显示
			
		如果元素的层级一样，则优先显示靠下的元素


雪碧图与图标字体的使用

	雪碧图
		雪碧图特点：
			一次性将多个图片加载进页面，降低请求的次数，加快访问速度，提升用户体验
		
		雪碧图的使用步骤：
			1. 确定要使用的图标
			2. 测量图标的大小
			3. 根据测量结构创建一个元素
			4. 将雪碧图设置为元素的背景图片
			5. 设置一个偏移量以显示正确的图片

	图标字体(iconfont)
		- 在网页中经常需要使用一些图标，可以通过图片来引入图标
			但是图片大小本身比较大，并且非常不灵活
		- 所以，在使用图标时，还可以将图标设置为字体进行引入
		- 通过字体样式的形式来使用图标字体
		
		fontawesome 使用步骤
			1. 下载https://fontawesome.com
			2. 解压
			3. 将css和webfonts复制一份到项目中
			4. 将all.css引入到网页中
			5. 使用图标字体
				- 直接通过 i标签 类名来使用图标字体，可以通过样式指定图标字体大小和字体图标颜色
					<i class='fas 类名'></i>
					<i class='fab 类名'></i>


	
	长度单位
		- 像素px
		- 百分比% 
		- 相对单位(相对字体)em

	颜色单位
		- 颜色单词
		- green 绿色
		- blue 蓝色
		- red 红色
	
		- RGB值 
		- 语法：
		- RGB(0,0,0)
		- RGB(0%, 0%, 0%)
	
		- 十六进制RGB值
		- 语法：
		- #红色绿色蓝色(十六进制)
	
	字体分类(不同浏览器理解不一致)
		- serif (衬线字体)
		- sans-serif (非衬线字体)
		- monospace (等宽字体)
		- cursive (草书字体)
		- fantasy (虚幻字体)
	
	设置字体相关的所有属性
		font 
			语法：
				font: [加粗/斜体]  字体大小[/行高] 字体族
				加粗、斜体和行高可以省略不写，如果不写就使用默认值normal
			- 设置font 会覆盖前面对字体设置的样式

		font-weight 字体的加粗
			可选值：
				normal 默认值 不加粗
				bold 加粗

		font-style 字体的风格
			可选值： 
				normal 正常的
				italic 斜体		
		
		行高(line-height)
			- 行高指文字占有的实际高度
			- 通过line-height来设置行高
				行高可以直接指定一个大小(px em)
				也可以直接指定一个整数
					如果是整数，行高将会是字体的指定的倍数
			- 行高经常还用来设置文字的行间距
				行间距 = 行高 - 字体大小
			作用
			- 用来使单行文本居中

		字体框
			- 字体框就是字体存在的格子，设置font-size实际上就是设置字体框的高度

	文本样式设置
		text-align  设置文本的水平对齐
			可选值：
				left 左侧对齐
				right 右侧对齐
				center 居中对齐
				justify 两端对齐

		text-decoration 设置文本修饰
			可选值：
				none 设置无样式
				underline 下划线
				line-through 删除线
				overline 上划线

		white-space 设置网页如何处理空白
			可选值：
				normal 正常
				nowrap 不换行
				pre 保留空白

		verticle-align 设置元素垂直对齐的方式
			可选值：
				baseline 默认值 基线对齐
				top 顶部对齐
				bottom 底部对齐
				middle 居中对齐

		对元素的常见操作
		display: inline 转换为行类元素
		display: block 转换为块元素
		display: inline-block 转换为行类块元素

		对文字的常用操作
		line-height: 100px 与父元素相同代表垂直居中
		text-align: center 水平居中

		隐藏元素的样式
		display: none;
		visibility: hidden;
		opacity: 0;
				
	背景
		background-color 设置背景颜色

		background-image 设置背景图片
			- 可同时设置背景颜色和背景图片，同时设置，背景颜色会成为背景色
			- 背景图片小于元素大小，则会自动平铺将元素占满
			- 背景图片大于元素大小，则图片部分位置显示不完全
		
			语法：
				background-image: url('图片路径');
		
		background-repeat 设置图片重复方式
			可选值
				repeat 默认值 背景会延照x轴 y轴方向重复
				repeat-x 延着 x轴 方向重复
				repeat-y 延着 y轴 方向重复
				no-repeat 背景图片不重复
			
			语法:
				background-repeat: repeat;

		background-position 设置背景图片位置值，
			设置方式：
				通过 top left right bottom center 几个方位表示图片位置
					使用方位词时需要同时指定两个，如果只写一个,另一个则为center 
				语法：
					- background-position: top centent;

				通过偏移量来指定背景图片的位置
					水平方向的偏移量 垂直方向变量	
				语法：
					- background-position: 10px 10px;

		background-clip 设置背景范围
			可选值
				border-box 默认值 背景会出现在边框下边
				padding-box 背景不会出现在边框下，只出现在内容区和内边距
				centent-box 背景只出现在内容区

		background-origin 背景图片的偏移量计算的原点
			可选值
				border-box 默认值，background-position从内边距开始计算
				centent-box 背景图片的偏移量从内容区开始计算
				border-box 背景图片的变量从边框开始计算

		background-size 设置背景图片的大小
			语法：
				- background-size: 宽度 高度;
			
			如果只写一个，则第二个值默认是 auto
			
			可选值：
				cover 图片比例不变 将元素铺满
				contain 图片比例不变 将图片在元素中完整显示
			
		background-attachment 设置背景图片是否跟随元素移动
			- 可选值
				scroll 默认值 背景图片会跟随元素移动
				fixed 背景会固定在页面中，不会随元素移动

		
		background 背景相关简写属性，所有的背景相关的样式都可以通过该样式来设置
			注意：
				background-size 必须写在 background-position 的后边并且使用 /
				隔开
				background-position/background-size
			
				background-origin background-clip 两个样式 origin 要在clip前面


		通过背景属性设置渐变
			background-image 

				linear-gradinet 线性渐变，颜色沿着一条直线发生变化
					
					用法：
						background-image: linear-gradinet(red, yellow) 红色在开头 黄色在结尾 中间是过度区域
						- 线性渐变的开头，可以指定一个渐变方向(在颜色后面跟 像素可以设置颜色占渐变的大小)
							to left
							to right
							to bottom(默认值)
							to top
							deg deg 表示度数
							turn 表示圈

						- 渐变可以同时指定多个颜色，多个颜色默认情况下平均分布
							也可以手动指定渐变的分布情况

						background-image: repeating-linear-gradient() 可以平铺的线性渐变	

				radial-gradient 径向渐变 放射性的效果
				语法：
					radial-gradient(shape size at position, start-color, ..., last-color);
				
				默认情况下径向渐变的形状根据元素的形状来计算的
					正方形 --> 圆形
					长方形 --> 椭圆形

				radial-gradient 可以手动指定径向渐变的大小
				- 语法：
					radial-gradient(大小 ,颜色, 颜色)

				radial-gradient 指定圆的类型
				- 语法
					radial-gradient([eircle/ellipse],颜色,颜色)
					circle 表示正圆
					ellipse 表示椭圆

				radial-gradient 可以指定渐变的位置
				- 语法
					radial-gradient(大小 at 渐变位置, 颜色 位置, 颜色 位置, 颜色 位置)
					大小：
						circle 表示正圆
						ellipse 表示椭圆
						closest-side 近边
						closest-corner 近角
						farthest-side 远边
						farthest-corner 远角
					
					位置：
						top right left center bottom 

表格
	<table>
		<tr> 代表单元格中的一行
			<td>A1</td>	代表一个单元格
			<td>B1</td>
			<td>C1</td>
			<td>D1</td>
		</tr>B
		<tr>
			<td>A2</td>C
			<td>B2</td>
			<td>C2</td>
			<td rowspan='2'>D2</td>
			rowspan='2' 纵向合并单元格
		</tr>A
		<tr>
			<td>A3</td>
			<td>B3</td>
			<td>C3</td>
			<td colspan='2'>D3</td>
			colspan 横向合并单元格
		</tr>
	</table>

	长表格
		thead 头部
		tbody 主体
		tfoot 底部
		语法：
			<table>
				<thead>
					<tr>
						<td>日期</td>
						<td>收入</td>
						<td>支出</td>
						<td>合计</td>
					</tr>
				</thead>
					<tr>
						<td>2020.11.11</td>
						<td>300</td>
						<td>200</td>
						<td>100</td>
					</tr>
				<tbody>
				</tdoby>
				<tfoot>
					<tr>
						<td></td>
						<td></td>
						<td>合计</td>
						<td>300</td>
					</tr>
				</tfoot>

	表格的css样式
		
		border-spacing: 指定表格之间的距离
		- 语法
			border-spacing: 0px;
		
		border-collapse: collapse; 设置边框的合并

		displat: table-cell; 将元素设置为单元格

		利用伪元素选择器 对表格进行隔行变色
		
			tr:nth-child(odd/even){
				background-color: #bfa;
			}

表单
	- 在现实生活中用于提交数据
	- 在网页中使用表单将本地的数据提交到远程服务器
	- 使用form 标签来创建一个表单

	form的属性
		action 表单要提交的服务器的地址

		语法：
			<form action='服务器地址'>
			</form>
	
	input的属性
		autocomplete='off' 关闭自动补全
		readonly 将表单项设置为只读，数据会提交
		disabled 将表单项设置为禁用，数据不会提交
		autofocus 设置表单项自动获取焦点

	提交按钮
		<input type='submit' value='提交'>

	文本框
	注意：提交到服务器中，必须要为元素指定一个name属性值
		语法： 
			<input type="text" name="username">

	密码框
		语法： 
			<input type="password" name="password">

	单选按钮
		- 必须指定一个value属性和name属性, value属性最终会作为用户选择的值进行提交
		- checked 可以将单选按钮设置为默认选中
		
		语法:
			<input type="radio" name='sex' value='男' checked>
			<input type='radio' name='sex' value='女' >

	多选框
		- 必须指定 value属性 和name属性
		- checked 可以将多选按钮设置为默认选中

		语法:
			<input type='checkbox' name='hobby' value='打篮球'>
			<input type='checkbox' name='hobby' value='乒乓球'>
			<input type='checkbox' name='hobby' value='打电子游戏' checked>

	下拉列表
	<select name='haha'>
		<option value='i'>选项一</option>
		<option value='ii'>选项二</option>
		<option value='iii'>选项三</option>
	</select>


---------------------------------------------------------------------------------------------------------------------------
CSS3

过渡 (transition)
transition 可以同时设置过渡相关的所有属性，只有一个要求，如果要写延迟，则两个时间第一个是持续时间，第二个是延迟
		1. 过渡的属性与时间
		2. 过渡效果
			- 匀速 加速 减速 自定义 
		3. 过渡延迟
	作用:
	- 通过过度可以指定一个属性 发生变化时的切换方式
	- 通过过度可以创建一些非常好的效果，提升用户体验

	相关属性
	transition-property: 指定要执行过度的属性
		多个属性间使用,隔开如果所有属性都要过渡,则使用all关键字
		大部分属性都支持过渡效果,但是过渡时必须是从一个有效数值向另一个有效数值进行过渡
		
		语法:
			transition-property: width, height;

	transition-duration: 指定过渡效果的持续时间
		时间单位: s 和 ms 1s = 1000ms

		语法: 
			transition-duration: 100ms,1s;

	transition-timing-function: 过渡的时序函数
		作用: 指定过渡执行的方式
		可选值:
			ease 默认值，慢速开始，先加速，再减速
			linear 匀速运动
			ease-in 加速运动
			ease-out 减速运动
			ease-in-out 先加速 后减速
			cubic-bezier() 用来指定时序函数
				https://cubic-bezier.com
			
			steps() 分布执行过渡效果
				可以设置一个第二个值
					end, 在时间结束时执行过渡效果(默认值)
					start , 在时间开始时执行过渡

		语法:
			transition-timing-function: cubic-bezier(.24,.95,.82,-0.88)
			transition-timing-function: steps(2, start);

	transition-delay: 过渡效果的延迟，等待一段时间后在执行过渡

		语法:
			transition-delay: 2s;
	
	transition 可以同时设置过渡相关的所有属性，只有一个要求，如果要写延迟，则两个时间第一个是持续时间，第二个是延迟
	
动画 (animagtion)

	动画和过渡类似，都是可以实现一些动态的效果
	区别：
		过渡需要在某个属性发生变化时才会触发
		动画可以自动触发动态效果

	设置动画效果，必须先要设置一个关键帧，关键帧设置了动画每一个步骤
		@keyframes test{
			#from表示动画的开始位置 也可以使用
			from{
				margin-left: 0;
			}
			# to动画的结束位置 也可以使用100%
			to{
				margin-left: 700px;
			}
		}
	
	- animation-duration 动画执行时间
	- animation-delay 动画的延时
	- animation-iteration-count 动画的执行次数
	- animation-direction 动画的运行方向
	- animation-play-state 动画的执行状态
	- animation-fill-mode 动画的填充模式
	相关属性：
	animation-name
		作用：
			设置 当前元素的动画 要对当前元素生效的关键帧的名字
		语法：
			animation-name: test;
		
	animation-duration
		作用：动画的执行时间
		语法：
			animation-duration: 2s;
	
	animation-delay
		作用：动画的延时
		语法：
			animation-delay: 2s;

	animation-timing-function: ease-in-out;

	animation-iteration-count
		作用：动画执行的次数
		可选值：
			次数
			infinite 无限执行
		语法： 
			animation-iteration-count: 2;

	animation-direction
		作用：指定动画运行的方向
		可选值：
			normal 默认值 从 from 向 to 运行 每次都是这样
			reverse 从 to 向 from 运行 每次都是这样
			alternate 从 from 向 to 运行 重复执行动画时反向执行
			alternate-reverse 从 to 向 from 运行 重复执行动画时反向执行
		语法：
			animation-direction: alternate-reverse;

	animation-play-state
		作用： 设置动画的执行状态 
		可选值：
			runing 默认值 动画执行
			paused 动画暂停
		语法：
			animation-play-start: paused;

	animation-fill-mode
		作用： 动画的填充模式
		可选值：
			none 默认值 动画执行完毕元素回到原来位置
			forwards 动画执行完毕元素会停止在动画结束的位置
			backwards 动画延时等待时，元素就会处于开始位置
			both 结合了forwards 和 backwards
		语法： 
			animation-fill-mode: both;
	
变形 (transform)
	变形就是指通过css来改变元素的形状或位置
	- 变形不会影响到页面的布局

	- transform 用来设置元素的变形效果
		- 平移：
			translateX() 沿着x轴方向平移
			translateY() 沿着y轴方向平移
			translateZ() 沿着z轴方向平移
				- 平移元素,百分比是相对于自身计算的
			语法： 
				transform: translateY(-100px);
		- 旋转
			通过transform来设置旋转可以使元素沿着x y 或 z旋转指定的角度
				rotateX()
				rotateY()
				rotateZ()
			语法：
				transform: rotateX(45deg)

			transform-origin 设置旋转轴心
				可选值：
					left 轴心在左
					right 轴心在右
		- 缩放
			对元素进行缩放的函数
				scaleX() 水平方向缩放
				scaleY() 垂直方向缩放
				scale() 双方向缩放
			语法：
				transform: scaleX(45deg)
		
		- 单位：turn(圈数) deg(度数)
	

	z轴平移,移动元素在z轴的位置，正常情况就是调整元素何人眼之间的距离
		距离越大，元素离人越近
	z轴平移属于立体效果(近大远小), 默认情况下网页是不支持透视，如果需要
		看见效果必须设置网页的视距
	
	相关样式
	perspective 
		作用：设置当前网页视距
		语法：
			perspective: 800px

	backface-visibility
	作用：是否显示元素的背面
	语法：
		backface-visibility: hidden

	opacity 
	作用：设置图形透明度
	语法： 
		opacity: 0.4;
	
	transform-style
	作用：设置3d变形效果
	语法：
	transform-style: preserve-3d; 

------------------------------
弹性盒
	flex(弹性盒、伸缩盒)
	 - 是CSS中的又一种布局手段，它主要用来替代浮动来完成页面的布局
	 - flex可以使元素具有弹性，让元素可以跟随页面的大小改变而改变

	弹性容器
	 - 要使用弹性盒，必须先将一个额元素设置为弹性容器
	 - 我们通过display来设置弹性容器
	 	display: flex 设置为块级弹性容器
		display: inline-flex 设置为行内的弹性容器
	
	弹性元素
	 - 弹性容器的子元素是弹性元素（弹性项）


	主轴：
		弹性元素的排列方向称为主轴
	侧轴
		与主轴垂直方向的称为侧轴	

	弹性容器的样式：
		fiex-direction
		作用：指定容器中弹性元素的排列方式
		可选值：
			row 默认值，弹性元素在容器中水平排列（左向右）
			row-reverse 弹性元素在容器中反向水平排列（右向左）
			column 弹性元素纵向排列（自上而下）
			column-reverse 弹性元素方向纵向排列 （自下向上）

		flex-flow:属性是 flex-direction 和 flex-wrap 的简写。
		
		flex-wrap
		作用：设置弹性元素是否在弹性容器中自动换行
		可选值：
			nowrap 默认值，元素不会自动换行
			wrap 元素沿着辅轴方向自动换行
			wrap-reverse 元素沿着辅轴反方向换行
		
		justify-centent
		作用：如何分配主轴上的空白空间（主轴上的元素如何排列）
		可选值：
			flex-start 元素沿着主轴起边排列
			flex-end 元素沿着主轴终边排列
			center 元素居中排列
			space-around 空白分布到元素间
			space-between 空白区域分散到元素间 （两侧不分散 中间分散）
			space-evenly 空白分布到元素的单侧
		
		align-items
		作用：元素在辅轴上如何对齐、元素间的关系
		可选值：
			stretch 默认值，将元素的长度设置为相同的值
			flex-start 元素不会拉升，沿着辅轴起边对齐
			flex-end 沿着辅轴的终边对齐
			center 居中对齐 
			baseline 基线对齐

		align-content
		作用：辅轴空白空间的分布
		可选值：
			flex-start 元素沿着主轴起边排列
			flex-end 元素沿着主轴终边排列
			center 元素居中排列
			space-around 空白分布到元素间
			space-between 空白区域分散到元素间 （两侧不分散 中间分散）
			space-evenly 空白分布到元素的单侧

	
	弹性元素的样式：
		弹性元素的缩减系数
			- 缩减系数的计算方式比较复杂
			- 缩减多少根据 缩减系数 和 元素大小来计算

		flex-grow 指定弹性元素的伸展的系数
		作用：当父元素有多余空间时，子元素如何扩展
			  父元素的剩余空间，会按照比例进行分配
		可选值：1 2 3

		flex-shrink 指定弹性元素的收缩系数
		- 当父元素中的空间不足以容纳所有子元素时，则对子元素进行收缩

		flex-basis
		作用：指定的是元素在主轴上的基础长度
			如果主轴是 横向的 则 该值指定的就是元素的宽度
			如果主轴是 纵向的 则 该值指定的就是元素的高度
			- 默认值是 auto 表示参考元素自身高度或宽度
			- 如果传毒了一个具体的数值，则以该值为准
		
		flex(简写属性) 
		作用：可以设置弹性元素所有的三个样式
		
		语法：
			flex 增长 缩减 基础
				initial "flex: 0 1 auto"
				auto "flex: 1 1 auto"
				none "flex: 0 0 auto" 弹性元素没有弹性

		order 
		作用：绝对弹性元素的排列顺序


-------------------------------------------------------
移动端

	像素：
		- 屏幕是由一个个发光的小点构成，这一个个的小点就是像素
		- 分辨率：1920 x 1080 说的就是屏幕中小点的数量
		- 在前端开发中像素主要分成两种情况讨论：css像素 和 物理像素
		- css像素，编写网页时，我们所用像素都是css像素
			- 浏览器在显示网页时，需要将css像素转换为物理像素然后再呈现
			- 一个css像素最终由几个物理像素显示，由浏览器决定：
				默认情况下再pc端，一个css像素 = 一个物理像素

	视口（viewport）
		- 视口就是屏幕中用来显示网页的区域
		- 可以通过查看视口的大小，来观察css像素和物理像素的比值
		- 默认情况下：
			视口宽度 1920px (css像素)
					1920px (物理像素)
					- 此时，css像素和物理像素的比是 1:1
		- 放大两倍的情况：
			视口宽度 960px (css像素)
					1920px (物理像素)
					- 此时，css像素和物理像素的比是1:2
		
		- 我们可以通过 改变视口 的大小，来改变css像素和物理像素的比值
		- meta标签来设置视口大小
		- 将网页的视口设置为完美视口（写移动端）
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			- device-width 表示设备的宽度（完美视口）
	移动端浏览pc网站的一些问题
	
	再不同的屏幕。单位像素的大小是不同的，像素越小屏幕会越清晰
		24寸 1920 x1334
		i6 4.7寸 750 x 1334

		智能手机的像素点 远远小于 计算机的像素点

		问题：一个宽度为900px的网页再iphone6中要如何显示呢？
		
		默认情况下，移动端的网页都会将视口设置为980像素（css像素）
		以确保pc端网页可以再移动端正常访问，但是如果网页的宽度超过了980
		移动端的浏览器会自动对网页缩放以完整显示网页

		https://material.io/resources/devices/
	
		

	vw 表示的是视口的宽度（viewport width）
	 - 100vw = 一个视口的宽度
	 - 1vw = 1%视口宽度

	 vw 这个单位永远相当于视口宽度进行计算

	 移动端一般设计图的宽度
	 	750px 1125px

	vw 与 px 换算案例
	100vw = 750px(设计图的像素) 
	0.13333333333vw = 1px
	6.4vw = 48px(设计图像素)
	4.667vw = 35px

	网页中字体大小最小是12px,不能设置一个比12像素还小的字体
	如果我们设置了一个小于12px的字体，则字体自动设置12

	0.13333333vw = 1px
	5.3333333vw = 40px
	
	rem
	 1 rem = 1 html的字体大小
	 1 rem = 40 px(设计图)
	 在设计图的总宽度等于 750像素的情况下，
	 100vw等于一个视口的宽度，设计图与浏览器视口的比值 也就是 100vw = 750px(设计图中的像素)
	 通过计算，1px = 0.13333333vw,那么可通过这样的换算来计算设计图中块的大小。
	 可以看到，这样并不是很方便。有一个很好的解决办法，
	 通过font-size 把字体大小设置为 5.3333333vw,之所以把1px 提升 到 40px  是因为方便计算。
	 一个字体大小 也就是1 rem = 5.333333vw = 40px
	 当我们创建一个 设计图中 的 48px x 35px 的方块时，
	在less中可以直接 width: 48/40rem;
					height: 35/40rem;  


------------------------------------------------------
媒体查询（响应式布局）

	响应式布局
		- 网页可以根据不同的设备或窗口大小呈现出不同的效果
		- 使用响应式布局，可以使一个网页适用于所有设备
		- 响应式布局的关键就是 媒体查询
		- 通过媒体查询，可以为不同的设备，或设备不同状态来分布设置样式

	使用媒体查询
		语法：@media 查询规则{}
			媒体类型：
				all 所有设备
				print 打印设备
				screen 带屏幕的设备
				speech 屏幕阅读器
				- 可以使用 , 连接多个媒体类型，这样它们之间就是一个 或 的关系

				可以在媒体查询类型前添加一个only,表示只有
					only的使用主要是为了兼容一些老版本浏览器

	媒体特性：
		width 视口的宽度
		height 视口的高度

		min-width 视口的最小宽度 （视口大于指定宽度时生效）
		max-width 视口的最大宽度（视口效益指定宽度时生效）

		样式切换的分界点，称其为断点，网页的样式会在这个点时发生变化

		一般常用的断点

		小于768 超小屏幕 max-width=768px
		大于768 小屏幕 min-width=768px
		大于992 中型屏幕 min-width=992px
		大于1200 大屏幕 min-width=1200px

		 /* 设置 当 视口 宽度 大于400px 并且 小于600px 改变样式 */
        @media (min-width:400px) and (max-width:600px){
            body{
                background-color: #bfa;
            }
        }



	

-------------------------------------------------

less简介
	less是一门预处理语言
	 - less是一个css的增强版，通过less可以编写更少的代码实现更强大的样式
	 - 在less中添加了许多的新特性，像对变量的支持、对mixin的支持
	 - less的语法和css语法类似 但是less增添了许多对css的扩展
	 	所有浏览器无法直接执行less代码，要执行必须将less转换为css 然后再由css执行 

	less编译工具
		vscode插件：easy LESS

	注释
		以//开头的注释，不会编译到css文件中
		以/**/包裹的注释会被编译到css文件中

	变量
		使用@来申明一个变量：@pink: pink;
		1. 作为普通属性值来使用：直接使用@pink
		2. 作为选择器和属性名：#@{selector的值}的形式
		3. 作为URL: @{url}
		4. 变量的延迟加载
	
	嵌套
		1. 基本嵌套规则
		2. &的使用

	混合
		混合就是将一系列属性从一个规则集引入到另一个规则集的方式
		1. 普通混合
		2. 不带输出的混合
		3. 带参数的混合
		4. 带参数并且默认值的混合
		5. 带多个参数的混合
		5. 命名参数
		7 匹配模式
		8. arguments变量

	运算
		在less中可以进行加减乘除的运算

	函数

	继承

	导入
		导入 library.less文件
		@import "library.less";


